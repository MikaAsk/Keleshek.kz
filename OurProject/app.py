import streamlit as st
import pandas as pd
import plotly.express as px

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    return pd.read_csv("vacancies_january_2.csv")

df = load_data()

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
if "page" not in st.session_state:
    st.session_state.page = "Home"

def navigate(page):
    st.session_state.page = page

st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
st.sidebar.button("üè† Home", on_click=lambda: navigate("Home"))
st.sidebar.button("üìä Analytics", on_click=lambda: navigate("Analytics"))
st.sidebar.button("üéì Universities", on_click=lambda: navigate("Universities"))

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
def load_html(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        return f.read()

# --- –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü ---
if st.session_state.page == "Home":
    st.components.v1.html(load_html("static/home.html"), height=600, scrolling=True)

elif st.session_state.page == "Analytics":
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞")

    # --- –§–∏–ª—å—Ç—Ä—ã ---
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
    city = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", ["–í—Å–µ"] + list(df["city"].unique()))
    role = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", ["–í—Å–µ"] + list(df["professional_role"].unique()))
    employment_type = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", ["–í—Å–µ"] + list(df["employment_type"].unique()))
    experience = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:", ["–í—Å–µ"] + list(df["experience"].unique()))

    if st.sidebar.button("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
        city, role, employment_type, experience = "–í—Å–µ", "–í—Å–µ", "–í—Å–µ", "–í—Å–µ"

    filtered_df = df.copy()
    if city != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["city"] == city]
    if role != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["professional_role"] == role]
    if employment_type != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["employment_type"] == employment_type]
    if experience != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df["experience"] == experience]

    # --- –ö–∞—Ä—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π ---
    st.subheader("üåç –ö–∞—Ä—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
    if "latitude" in filtered_df.columns and "longitude" in filtered_df.columns:
        fig_map = px.scatter_mapbox(
            filtered_df, 
            lat="latitude", lon="longitude", 
            hover_name="name", 
            hover_data=["salary_from", "salary_currency", "employer_name"], 
            zoom=4
        )
        fig_map.update_layout(
            mapbox_style="open-street-map",
            margin={"r":0, "t":0, "l":0, "b":0}
        )
        st.plotly_chart(fig_map, use_container_width=True)
        st.write(f"–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ {len(filtered_df)} –≤–∞–∫–∞–Ω—Å–∏–π.")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.")

    # --- –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º ---
    st.subheader("üìà –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º")
    salary_data = filtered_df.groupby(["city", "professional_role"])["salary_from"].mean().reset_index()
    if not salary_data.empty:
        fig_salary = px.bar(
            salary_data, 
            x="city", 
            y="salary_from", 
            color="professional_role", 
            title="–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º"
        )
        st.plotly_chart(fig_salary, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã.")

    # --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç ---
    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç")
    if "salary_from" in filtered_df.columns and not filtered_df["salary_from"].isna().all():
        fig_salary_dist = px.histogram(
            filtered_df, 
            x="salary_from", 
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞—Ä–ø–ª–∞—Ç",
            nbins=20
        )
        st.plotly_chart(fig_salary_dist, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç.")

    # --- –î–æ–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –æ–ø—ã—Ç–∞ ---
    st.subheader("üìå –î–æ–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –æ–ø—ã—Ç–∞")
    employment_counts = filtered_df["employment_type"].value_counts().reset_index()
    employment_counts.columns = ["employment_type", "count"]
    
    if not employment_counts.empty:
        fig_employment = px.pie(
            employment_counts, 
            names="employment_type", 
            values="count", 
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"
        )
        st.plotly_chart(fig_employment, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–∞—Ö –∑–∞–Ω—è—Ç–æ—Å—Ç–∏.")

    # --- –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ---
    st.subheader("üî• –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")
    role_counts = filtered_df["professional_role"].value_counts().reset_index()
    role_counts.columns = ["professional_role", "count"]
    
    if not role_counts.empty:
        fig_roles = px.bar(
            role_counts.head(10), 
            x="professional_role", 
            y="count", 
            title="–¢–æ–ø-10 —Å–∞–º—ã—Ö –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π"
        )
        st.plotly_chart(fig_roles, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö.")

elif st.session_state.page == "Universities":
    st.components.v1.html(load_html("static/universities.html"), height=600, scrolling=True)
