import streamlit as st
import pandas as pd
import plotly.express as px

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π", layout="wide")

# üé® –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
    <style>
        body {background-color: #f5f7fa;}
        .main-title {text-align: center; font-size: 28px; font-weight: bold; color: #333;}
        .sub-title {font-size: 20px; font-weight: bold; margin-bottom: 10px; color: #555;}
        .stPlotlyChart {background: white; padding: 15px; border-radius: 10px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1);}
    </style>
""", unsafe_allow_html=True)

# üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
@st.cache_data
def load_data():
    return pd.read_csv("vacancies_january_2.csv")

df = load_data()

# üéõÔ∏è –§–∏–ª—å—Ç—Ä—ã (—Å–ª–µ–≤–∞)
with st.sidebar:
    st.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    city = st.selectbox("üèô –ì–æ—Ä–æ–¥:", ["–í—Å–µ"] + list(df["city"].dropna().unique()))
    role = st.selectbox("üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è:", ["–í—Å–µ"] + list(df["professional_role"].dropna().unique()))

filtered_df = df.copy()
if city != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["city"] == city]
if role != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["professional_role"] == role]

filtered_df = filtered_df.dropna(subset=["latitude", "longitude"])

# üèÜ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("<h1 class='main-title'>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞</h1>", unsafe_allow_html=True)

# üìå –ö–∞—Ä—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π
st.markdown("<h2 class='sub-title'>üåç –ö–∞—Ä—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π</h2>", unsafe_allow_html=True)
if not filtered_df.empty:
    fig_map = px.scatter_mapbox(
        filtered_df, lat="latitude", lon="longitude", hover_name="name",
        hover_data=["salary_from", "salary_currency", "employer_name"], zoom=4, height=500
    )
    fig_map.update_layout(mapbox_style="open-street-map", margin={"r":0,"t":0,"l":0,"b":0})
    st.plotly_chart(fig_map, use_container_width=True)
else:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.")

# üí∞ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
st.markdown("<h2 class='sub-title'>üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç</h2>", unsafe_allow_html=True)

# –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
salary_filtered = filtered_df.dropna(subset=["salary_from"])

# –°–æ–∑–¥–∞–µ–º bins –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç
fig_salary = px.histogram(
    salary_filtered, 
    x="salary_from", 
    nbins=30, 
    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º",
    color="salary_from",  
    color_continuous_scale="bluered",  # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–∏–Ω–µ–≥–æ –∫ –∫—Ä–∞—Å–Ω–æ–º—É
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
fig_salary.update_layout(
    xaxis_title="–ó–∞—Ä–ø–ª–∞—Ç–∞",
    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π",
    coloraxis_colorbar=dict(
        title="–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã",  
        tickvals=[salary_filtered["salary_from"].min(), salary_filtered["salary_from"].max()],
        ticktext=["–ù–∏–∑–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã", "–í—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã"],
    ),
    margin=dict(l=40, r=40, t=40, b=40),  
)

st.plotly_chart(fig_salary, use_container_width=True)


# üìå –¢–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (—Ä—è–¥–æ–º)
col1, col2 = st.columns(2)
with col1:
    st.markdown("<h2 class='sub-title'>üìå –¢–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏</h2>", unsafe_allow_html=True)
    employment_counts = filtered_df["employment_type"].value_counts().reset_index()
    employment_counts.columns = ["employment_type", "count"]
    fig_employment = px.pie(employment_counts, names="employment_type", values="count", color_discrete_sequence=px.colors.qualitative.Set2)
    fig_employment.update_traces(textinfo="percent+label")
    st.plotly_chart(fig_employment, use_container_width=True)

with col2:
    st.markdown("<h2 class='sub-title'>üéØ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h2>", unsafe_allow_html=True)
    experience_counts = filtered_df["experience"].value_counts().reset_index()
    experience_counts.columns = ["experience", "count"]
    fig_experience = px.pie(experience_counts, names="experience", values="count", color_discrete_sequence=px.colors.qualitative.Pastel)
    fig_experience.update_traces(textinfo="percent+label")
    st.plotly_chart(fig_experience, use_container_width=True)

# üè¢ –¢–æ–ø-10 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
st.markdown("<h2 class='sub-title'>üè¢ –¢–æ–ø-10 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π</h2>", unsafe_allow_html=True)
top_employers = df["employer_name"].value_counts().nlargest(10).reset_index()
top_employers.columns = ["employer_name", "count"]
fig_employers = px.bar(top_employers, x="employer_name", y="count", color="employer_name", color_discrete_sequence=px.colors.qualitative.Set3)
fig_employers.update_layout(xaxis_title="–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π", xaxis_tickangle=-45)
st.plotly_chart(fig_employers, use_container_width=True)
