import streamlit as st
import pandas as pd
import plotly.express as px

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
@st.cache_data
def load_data():
    return pd.read_csv("vacancies_january_2.csv")

df = load_data()

# --- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.markdown("""
    <style>
        .main {background-color: #f8f9fa; padding: 20px; border-radius: 10px;}
        .sidebar .block-container {background-color: #ffffff; padding: 20px; border-radius: 10px;}
        .stButton>button {background-color: #007bff; color: white; border-radius: 5px;}
    </style>
""", unsafe_allow_html=True)

# --- –§–∏–ª—å—Ç—Ä—ã ---
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
city = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", df["city"].unique(), default=[])
role = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", df["professional_role"].unique(), default=[])
employment_type = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", df["employment_type"].unique(), default=[])
experience = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç:", df["experience"].unique(), default=[])

# –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
if st.sidebar.button("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
    city, role, employment_type, experience = [], [], [], []

filtered_df = df.copy()
if city:
    filtered_df = filtered_df[filtered_df["city"].isin(city)]
if role:
    filtered_df = filtered_df[filtered_df["professional_role"].isin(role)]
if employment_type:
    filtered_df = filtered_df[filtered_df["employment_type"].isin(employment_type)]
if experience:
    filtered_df = filtered_df[filtered_df["experience"].isin(experience)]

filtered_df = filtered_df.dropna(subset=["latitude", "longitude"])

with st.container():
    st.subheader("üåç –ö–∞—Ä—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
    if "latitude" in filtered_df.columns and "longitude" in filtered_df.columns:
        fig_map = px.scatter_mapbox(
            filtered_df, lat="latitude", lon="longitude", hover_name="name", 
            hover_data=["salary_from", "salary_currency", "employer_name"], zoom=4
        )
        fig_map.update_layout(mapbox_style="open-street-map", margin={"r":0, "t":0, "l":0, "b":0})
        st.plotly_chart(fig_map, use_container_width=True)
        st.write(f"–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ {len(filtered_df)} –≤–∞–∫–∞–Ω—Å–∏–π.")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.")

with st.container():
    st.subheader("üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç")
    fig2 = px.histogram(filtered_df, x="salary_from", nbins=20, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º", color_discrete_sequence=['blue'])
    fig2.update_layout(margin={"r":10, "t":30, "l":10, "b":30})
    st.plotly_chart(fig2, use_container_width=True)
    if not filtered_df.empty:
        st.write(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {filtered_df['salary_from'].mean():,.0f} —Ç–µ–Ω–≥–µ.")

with st.container():
    st.subheader("üìå –¢–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")
    employment_counts = filtered_df["employment_type"].value_counts().reset_index()
    employment_counts.columns = ["employment_type", "count"]
    fig3 = px.pie(employment_counts, names="employment_type", values="count", title="–î–æ–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")
    st.plotly_chart(fig3, use_container_width=True)
    if not employment_counts.empty:
        top_employment = employment_counts.iloc[0]
        st.write(f"–ù–∞–∏–±–æ–ª—å—à–∞—è –¥–æ–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {top_employment['employment_type']} ({top_employment['count']} –≤–∞–∫–∞–Ω—Å–∏–π).")

with st.container():
    st.subheader("üéØ –¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
    experience_counts = filtered_df["experience"].value_counts().reset_index()
    experience_counts.columns = ["experience", "count"]
    fig4 = px.pie(experience_counts, names="experience", values="count", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã")
    st.plotly_chart(fig4, use_container_width=True)
    if not experience_counts.empty:
        top_experience = experience_counts.iloc[0]
        st.write(f"–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –∏—â—É—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Å –æ–ø—ã—Ç–æ–º {top_experience['experience']} ({top_experience['count']} –≤–∞–∫–∞–Ω—Å–∏–π).")

with st.container():
    st.subheader("üè¢ –¢–æ–ø-20 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π")
    top_employers = df["employer_name"].value_counts().nlargest(20).reset_index()
    top_employers.columns = ["employer_name", "count"]
    fig5 = px.bar(top_employers, x="employer_name", y="count", title="–¢–æ–ø-20 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π", color="employer_name")
    st.plotly_chart(fig5, use_container_width=True)
    if not top_employers.empty:
        st.write(f"–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å: {top_employers.iloc[0]['employer_name']} ({top_employers.iloc[0]['count']} –≤–∞–∫–∞–Ω—Å–∏–π).")

with st.container():
    st.subheader("üìä –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")
    demand_counts = filtered_df["professional_role"].value_counts().nlargest(20).reset_index()
    demand_counts.columns = ["professional_role", "count"]
    fig_demand = px.bar(demand_counts, x="professional_role", y="count", title="–¢–æ–ø-20 –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π", color="count", color_continuous_scale="Blues")
    st.plotly_chart(fig_demand, use_container_width=True)
    if not demand_counts.empty:
        st.write(f"–°–∞–º–∞—è –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: {demand_counts.iloc[0]['professional_role']} ({demand_counts.iloc[0]['count']} –≤–∞–∫–∞–Ω—Å–∏–π).")
