import streamlit as st
import pandas as pd
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞", layout="centered")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
@st.cache_data
def load_data():
    return pd.read_csv("vacancies_january_2.csv")

df = load_data()

# --- –§–∏–ª—å—Ç—Ä—ã ---
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
city = st.sidebar.selectbox("üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", ["–í—Å–µ"] + list(df["city"].dropna().unique()))
role = st.sidebar.selectbox("üíº –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", ["–í—Å–µ"] + list(df["professional_role"].dropna().unique()))

filtered_df = df.copy()
if city != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["city"] == city]
if role != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["professional_role"] == role]

# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
filtered_df = filtered_df.dropna(subset=["latitude", "longitude"])

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞")

# --- –ö–∞—Ä—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π ---
st.markdown("## üåç –ö–∞—Ä—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π")

if not filtered_df.empty:
    fig_map = px.scatter_mapbox(
        filtered_df, 
        lat="latitude", lon="longitude", 
        hover_name="name", 
        hover_data=["salary_from", "salary_currency", "employer_name"], 
        zoom=4, height=500
    )
    fig_map.update_layout(
        mapbox_style="open-street-map", 
        margin={"r":0,"t":0,"l":0,"b":0},
        paper_bgcolor="rgba(0,0,0,0)", 
        font=dict(size=14)
    )
    st.plotly_chart(fig_map, use_container_width=True)
else:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.")

# --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç ---
st.markdown("## üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç")

fig_salary = px.histogram(
    filtered_df, 
    x="salary_from", 
    nbins=20, 
    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º", 
    color_discrete_sequence=['#1f77b4']
)
fig_salary.update_layout(
    bargap=0.2, 
    paper_bgcolor="rgba(0,0,0,0)",
    font=dict(size=14)
)
st.plotly_chart(fig_salary, use_container_width=True)

# --- –î–æ–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ ---
st.markdown("## üìå –¢–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")

employment_counts = filtered_df["employment_type"].value_counts().reset_index()
employment_counts.columns = ["employment_type", "count"]

fig_employment = px.pie(
    employment_counts, 
    names="employment_type", 
    values="count", 
    title="–î–æ–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",
    color_discrete_sequence=px.colors.qualitative.Set2
)
fig_employment.update_traces(textinfo="percent+label")
st.plotly_chart(fig_employment, use_container_width=True)

# --- –¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ---
st.markdown("## üéØ –¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")

experience_counts = filtered_df["experience"].value_counts().reset_index()
experience_counts.columns = ["experience", "count"]

fig_experience = px.pie(
    experience_counts, 
    names="experience", 
    values="count", 
    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É —Ä–∞–±–æ—Ç—ã",
    color_discrete_sequence=px.colors.qualitative.Pastel
)
fig_experience.update_traces(textinfo="percent+label")
st.plotly_chart(fig_experience, use_container_width=True)

# --- –¢–æ–ø-10 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π ---
st.markdown("## üè¢ –¢–æ–ø-10 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π")

top_employers = df["employer_name"].value_counts().nlargest(10).reset_index()
top_employers.columns = ["employer_name", "count"]

fig_employers = px.bar(
    top_employers, 
    x="employer_name", 
    y="count", 
    title="–¢–æ–ø-10 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π", 
    color="employer_name",
    color_discrete_sequence=px.colors.qualitative.Set3
)
fig_employers.update_layout(
    xaxis_title="–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", 
    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π",
    xaxis_tickangle=-45,
    paper_bgcolor="rgba(0,0,0,0)",
    font=dict(size=14)
)
st.plotly_chart(fig_employers, use_container_width=True)
